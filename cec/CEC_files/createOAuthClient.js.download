/**
 * Uses Okta client that is part of CEC framework
 * @param {Object} opts Options
 * @param {string} opts.authSessionMaxWait How long to wait for okta session to become available. Default 6s. 0 = no limit.
 * @param {string} opts.authSessionCheckInterval How often to check for availability of okta session. Default 1000ms
 * @param {string} opts.devMode Okta dev mode
 * @param {string} opts.issuer Okta issuer
 * @param {string} opts.redirectUri Okta redirect uri
 * @param {string} opts.clientId Okta client id
 * @return {function} Function that returns a promise of a valid OAuth token.
 */
function createOAuthClient(opts) {
  let waitForAuthSessionPromise = null;

  const authSessionMaxWait = getOption("authSessionMaxWait", 10000);
  const authSessionCheckInterval = getOption("authSessionCheckInterval", 1000);
  let oktaAuthorScriptPromise = null;
  let oktaAuthorClient = null;

  return (isAuthor() || isWeAreCisco()) ? newOAuthClient(opts) : frameworkOAuthClient;

  function newOAuthClient(opts) {
    const config = {
      issuer: opts.issuer,
      clientId: opts.clientId,
      redirectUri: opts.redirectUri,
      responseType: "code",
      pkce: true,
      devMode: opts.devMode || false,
    };
    const oktaLib = opts.oktaLib || '/c/dam/cec/cec/ecdigitalops/okta/okta-auth-js_min.js';
    
    const authorAuthClient = getAuthorAuthClient(config);

    return function () {
      return authorAuthClient.then((authClient) => {
        return authClient.tokenManager.getTokens().then(({ accessToken }) => {
          logDebug(accessToken);
          return accessToken.accessToken;
        });
      });
    }

    function getAuthorAuthClient(config) {
      if (oktaAuthorClient) return Promise.resolve(oktaAuthorClient);

      if (!oktaAuthorScriptPromise) {
        oktaAuthorScriptPromise = loadScript(oktaLib);
      }
      return oktaAuthorScriptPromise.then(function () {
        oktaAuthorClient = new OktaAuth(config);

        // Subscribe to authState change event.
        oktaAuthorClient.authStateManager.subscribe(function (authState) {
          // Logic based on authState is done here.
          if (!authState.isAuthenticated) {
            oktaAuthorClient.setOriginalUri(location.href);
            oktaAuthorClient.signInWithRedirect();
          }
          logDebug("authState", authState);
        });

        // normal app startup
        oktaAuthorClient.start(); // will update auth state and call event listeners
        return oktaAuthorClient;
      });
    }
  }

  function frameworkOAuthClient() {
    logDebug("Calling oAuthClient");

    return waitForFrameworkSSO()
      .then((sso) =>
        waitForAuthSession(sso, authSessionCheckInterval, authSessionMaxWait)
      )
      .then((sso) => {
        return sso.hasAuthHeader();
      })
      .then((authHeader) => {
        if (!authHeader) {
          const errorMessage = `No Authorization header: cdc.sso.hasAuthHeader()=>${authHeader}`;
          logError(errorMessage);
          throw new Error(errorMessage);
        }

        const token = getTokenFromHeader(authHeader);

        if (!token) {
          const errorMessage = `Couldn't parse token from authorization header: ${authHeader}`;
          logError(errorMessage);
          throw new Error(errorMessage);
        }

        return token;
      });
  }

  function getOption(optionName, defaultValue) {
    if (!opts) return defaultValue;

    if (opts[optionName] === undefined) return defaultValue;

    return opts[optionName];
  }

  async function waitForFrameworkSSO() {
    await import("/etc.clientlibs/cisco-cdc/clientlibs/clientlib-external/resources/external/external.js")
    return cdc.sso;
  }

  function waitForAuthSession(frameworkSso, checkInterval, maxWaitMillis) {
    let checkTimeout;
    let maxWaitTimeout;
    let checkCounter = 0;

    if (!waitForAuthSessionPromise) {
      logDebug(`Creating waitForAuthSessionPromise`);
      waitForAuthSessionPromise = new Promise((resolve, reject) => {
        if (maxWaitMillis) {
          maxWaitTimeout = setTimeout(() => {
            clearTimeout(checkTimeout);
            const errorMessage = `Failed to get okta auth session before ${maxWaitMillis} milliseconds.`;
            logError(errorMessage);
            reject(errorMessage);
          }, maxWaitMillis);
        }
        recursiveFrameworkAuthSessionCheck(resolve);
      });
    }

    return waitForAuthSessionPromise;

    function recursiveFrameworkAuthSessionCheck(resolve) {
      logDebug(`recursiveFrameworkAuthCheck ${++checkCounter}`);
      frameworkSso
        .checkAuth()
        .then((hasAuthSession) => {
          logDebug(`checkAuth()=>${hasAuthSession}`);
          if (hasAuthSession) {
            clearTimeout(maxWaitTimeout);
            resolve(frameworkSso);
          } else {
            checkTimeout = setTimeout(
              () => recursiveFrameworkAuthSessionCheck(resolve),
              checkInterval
            );
          }
        })
        .catch(logError);
    }
  }

  function getTokenFromHeader(header) {
    if (!header) return undefined;

    const authHeaderRegex = /Bearer (.*)$/i;
    const matches = authHeaderRegex.exec(header);

    if (matches) return matches[1];
  }

  function logError(...args) {
    console.error("OAuthClient: ", ...args);
  }

  function logDebug(...args) {
    if (location.hash.includes("debug-oauth")) {
      console.debug("OAuthClient: ", ...args);
    }
  }

  function isAuthor() {
    return location.hostname.includes("-author");
  }

  function isWeAreCisco(){
    return /\/c(ontent)?\/r\/weare\//.test(location.pathname);
  }
}
