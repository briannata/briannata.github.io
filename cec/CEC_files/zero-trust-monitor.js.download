// eslint-disable-next-line no-extra-semi
;(async function (global, options) {
    "use strict"
    var version = "v16/okta" // match the tag in repository, use this in cachebuster param in html
    logInfo("Version: " + version)
    var defaultOptions = {
        appToken: "61aec226fd929-a433-d22d-d87eef485b27", // for identification (NOT authorization)
        ciscoNetworkProbeUrl: "https://ecd-internal.cisco.com/probe.json",
        onCiscoNetwork: true,
        configUrl: "/c/dam/cec/cec/zero-trust-monitor/zero-trust-monitor.json",
        ciscoNetworkMonitorInterval: 10000,
        offCiscoNetworkClassName: "ecd-off-network",
        internalUrlClassName: "ecd-internal",
        skipCheckClassName: "ecd-skip",
        suppressWarningEventName: "ecdigital.suppressOffNetworkWarning",
        onCiscoNetworkEventName: "ecdigital.onCiscoNetwork",
        modalAppendAfter: "#fw-content",
        titleToken: " (NO_VPN)",
    }
    var opt = Object.assign(options, defaultOptions)
    var GlobalKey = {
        SuppressOffNetworkWarning: "suppressOffNetworkWarning",
        OnCiscoNetwork: "onCiscoNetwork",
    }
    initGlobal()
    setGlobal(GlobalKey.OnCiscoNetwork, opt.onCiscoNetwork)

    var checkboxSelector = "#suppressOffNetworkWarning"
    var internalHostnames = [
        "bookmarksadmin.cloudapps.cisco.com",
        "cards.cisco.com",
        "cecfeedback.cisco.com",
        "ciscosales.my.salesforce.com",
        "ctv2.cisco.com",
        "data-analytics.cisco.com",
        "dise.cisco.com",
        "docs.cisco.com",
        "ecdddpmo.cisco.com",
        "eclmnextgen.cloudapps.cisco.com",
        "engit.cisco.com",
        "estore.cisco.com",
        "globalmdmdashboard.cisco.com",
        "go2.cisco.com",
        "mbr.cloudapps.cisco.com",
        "opd.cisco.com",
        "policycentral.cloudapps.cisco.com",
        "sami.cisco.com",
        "sharevideo.cisco.com",
        "stock.cisco.com",
        "talentspace.cisco.com",
        "thehatch.cisco.com",
        "vap.cloudapps.cisco.com",
        "wwwin-enged.cisco.com",
        "wwwin-hrprd.cisco.com"
    ];
    var networkMonitorTimeoutId = null
    var queryParams = getParameters(location.search.slice(1))
    var TrackEventType = {
        Link: "link",
    }
    var TrackParam = {
        Lpos: "borderless-access-modal",
        /*  */
        LinkTextForImpression: "Opened modal",
        LinkTextForContinue: "Continue anyway",
        LinkTextForStay: "Stay on this page",
        LinkTextForClose: "X",
    }
    var Env = {
        Dev: "dev",
        Prod: "prod",
        Nprod: "nprod",
    }
    var envConfig = getEnvConfig()

    var UrlSwitch = {
        Borderless: "borderless",
        Track: "track",
        Preview: "preview",
        Debug: "debug",
    }
    logEnabledUrlSwitches()
    let oauthClient;
    initTooltip("#off-network-form");
    
    try {
        window.loadScript = loadScript;
        await loadScript("/c/dam/cec/cec/ecdigitalops/okta/createOAuthClient.js");
        console.log('Loaded createOAuthClient')
        /* if (await isRatingsAndCommentsComponentPresent()) {
            await loadRatingsAndCommentsScripts();
        } */
		await loadScript("/c/dam/cec/cec/ecdigitalops/util/remove-cec-article-ratings/remove-ratings.js");
    } catch(error) {
        return console.log(`Failed to load scripts`, error);
    }

    function isRatingsAndCommentsComponentPresent() {
        return new Promise((resolve) => {
            if (isPresent()) {
                resolve(true)
            } else {
                addEventListener("DOMContentLoaded", (event) => {
                    resolve(isPresent());
                });
            }
        });
        function isPresent() {
            return !!document.querySelector('script[src^="/etc/designs/cdc/fw/clientlibs/ratings-and-comments"]');
        }
    }

    async function loadRatingsAndCommentsScripts() {
        try {
            await loadScript("/c/dam/cec/cec/ecdigitalops/okta/ratings-and-comments.js");
            console.log('Loaded ratings-and-comments')
        } catch (error) {
            return console.log(`Failed to load ratings-and-comments scripts`, error);            
        }
    }
    
    oauthClient = createOAuthClient({
        oauthUrl: envConfig.oauthUrl,
        redirectUri: location.origin + envConfig.oauthRedirectUrl,
        clientId: envConfig.oauthClientId,
        issuer: envConfig.issuer
    })

    oauthClient()
        .then(getPreferences)
        .then(function (preferences) {
            if (preferences.suppressOffNetworkWarning !== undefined) {
                setSuppressOffNetworkWarning(
                    preferences.suppressOffNetworkWarning
                )
                setupCiscoNetworkMonitor(
                    opt.ciscoNetworkMonitorInterval,
                    getGlobal(GlobalKey.OnCiscoNetwork)
                )
            }
        })
        .catch(function (err) {
            logError(err)
        })


    function setSuppressOffNetworkWarning(value) {
        setGlobal(GlobalKey.SuppressOffNetworkWarning, value)
        runCiscoNetworkMonitor(opt.ciscoNetworkMonitorInterval)
    }

    function setOnCiscoNetwork(value) {
        setGlobal(GlobalKey.OnCiscoNetwork, value)
        window.dispatchEvent(
            new CustomEvent(opt.onCiscoNetworkEventName, {
                detail: { value: value },
            })
        )
    }

    function handleSuppressNotificationCheckboxChange() {
        var preferences = {
            suppressOffNetworkWarning: this.checked,
        }
        oauthClient()
            .then(function (oauthToken) {
                return patchPreferences(oauthToken, preferences)
            })
            .then(function () {
                setSuppressOffNetworkWarning(
                    preferences.suppressOffNetworkWarning
                )
            })
            .catch(function (err) {
                logError(err)
            })
    }

    function setupCiscoNetworkMonitor(interval, isOnCiscoNetwork) {
        var offCiscoNetwork = !isOnCiscoNetwork
        toggleDocumentBodyClass(offCiscoNetwork)
        toggleProxyLinkClicks(isOnCiscoNetwork)
        runCiscoNetworkMonitor(interval)
        window.addEventListener(opt.suppressWarningEventName, function (evt) {
            if (evt && evt.detail && evt.detail.value !== undefined) {
                setSuppressOffNetworkWarning(evt.detail.value)
            }
        })
    }

    function showOffCiscoNetworkModal(link, defaultConfigMetricsTitle) {
        $("#off-network").remove()
        $(opt.modalAppendAfter).append(
            $(modalMarkup(link, defaultConfigMetricsTitle))
        )
        $("body").addClass("modal_open-off_network")
        $(checkboxSelector).prop(
            "checked",
            getGlobal(GlobalKey.SuppressOffNetworkWarning)
        )
        $(checkboxSelector).on(
            "change",
            handleSuppressNotificationCheckboxChange
        )
        $("#off-network").one("click", ".close", function (e) {
            e.preventDefault()
            hideOffCiscoNetworkModal()
        })

        if (shouldTrackMetrics()) {
            trackMetrics({
                lpos: TrackParam.Lpos,
                lid:
                    getConfigMetricsTitle(link) ||
                    defaultConfigMetricsTitle ||
                    link.id ||
                    "",
                linktext: TrackParam.LinkTextForImpression,
            })
        }
    }

    function hideOffCiscoNetworkModal() {
        $("#off-network .window").removeClass("show")
        $("#off-network").off("click")
        $("body").removeClass("modal_open-off_network")
        $(checkboxSelector).off(
            "change",
            handleSuppressNotificationCheckboxChange
        )
    }

    function getConfigMetricsTitle(el) {
        var $el = $(el)
        return $el.data("config-metrics-title") || ""
    }

    function trackingAttributeMarkup(attributeName, value) {
        return shouldTrackMetrics() && value
            ? " " + attributeName + '="' + value + '" '
            : " "
    }

    function trackMetrics(data) {
        // https://tags.cisco.com/documentation/trackEvent
        trackEvent.event(TrackEventType.Link, {
            ntpagetag: data,
        })
    }

    function runCiscoNetworkMonitor(interval) {
        if (networkMonitorTimeoutId) {
            clearTimeout(networkMonitorTimeoutId)
        }
        if (getGlobal(GlobalKey.SuppressOffNetworkWarning))
            return logDebug("Off network warning is disabled.")

        isOnCiscoNetwork().then(networkStatusHandler.bind(null, interval))
    }

    function networkStatusHandler(interval, isOnCiscoNetwork) {
        setOnCiscoNetwork(isOnCiscoNetwork)
        var offCiscoNetwork = !isOnCiscoNetwork
        logDebug(
            (isOnCiscoNetwork ? "On Cisco network" : "Off Cisco network") +
                ". Next check in " +
                interval / 1000 +
                " seconds."
        )

        toggleDocumentBodyClass(offCiscoNetwork)
        toggleProxyLinkClicks(offCiscoNetwork)
        toggleDocumentTitle(offCiscoNetwork)

        networkMonitorTimeoutId = setTimeout(
            runCiscoNetworkMonitor.bind(null, interval),
            interval
        )
    }

    function toggleDocumentTitle(offCiscoNetwork) {
        document.title = toggleTokenInString(
            document.title,
            opt.titleToken,
            offCiscoNetwork
        )
    }

    function toggleDocumentBodyClass(offCiscoNetwork) {
        document.body.classList.toggle(
            opt.offCiscoNetworkClassName,
            offCiscoNetwork
        )
    }

    function toggleProxyLinkClicks(offCiscoNetwork) {
        $(document.body).off("click", proxyLinkClick)
        $(document.body).off("click", proxyCecNavSatLinkClick)
        if (offCiscoNetwork) {
            $(document.body).on("click", "a[href]", proxyLinkClick)
            $(document.body).on("click", "cec-nav-sat", proxyCecNavSatLinkClick)
        }
    }

    function proxyCecNavSatLinkClick(evt) {
        var originalEventTarget = getShadowDomEventTarget(evt)
        logDebug("Captured sat-nav click", originalEventTarget)
        if (originalEventTarget && originalEventTarget.href) {
            proxyLinkClick.call(originalEventTarget, evt, "cec-sat-nav", true)
        }
    }

    function getShadowDomEventTarget(evt) {
        // https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath
        var originalEvent = evt.originalEvent

        if (!originalEvent) return null

        var composedPath = originalEvent.composedPath()

        return composedPath[0]
    }

    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&") // $& means the whole matched string
    }

    function toggleTokenInString(str, token, toggle) {
        var result = str.replace(new RegExp(escapeRegExp(token) + "$"), "")
        if (toggle) {
            return result + token
        }
        return result
    }

    function shouldShowModal(link) {
        return (
            !shouldSkipCheck(link) &&
            !getGlobal(GlobalKey.SuppressOffNetworkWarning) &&
            isLinkInternal(link)
        )
    }

    function proxyLinkClick(evt, defaultConfigMetricsTitle) {
        var link = this
        if (shouldShowModal(link)) {
            evt.preventDefault()
            showOffCiscoNetworkModal(link, defaultConfigMetricsTitle)
        }
    }

    function shouldSkipCheck(link) {
        return link.classList.contains(opt.skipCheckClassName)
    }

    function isLinkInternal(linkElement) {
        return (
            linkElement &&
            linkElement.href &&
            (linkElement.classList.contains(opt.internalUrlClassName) ||
                isUrlInternal(linkElement.href))
        )
    }

    function isUrlInternal(url) {
        try {
            var parsedUrl = new URL(url)
            return internalHostnames.includes(parsedUrl.hostname)
        } catch (err) {
            return false
        }
    }

    function isOnCiscoNetwork() {
        logDebug("Doing network check.")
        if (UrlSwitch.Borderless in queryParams) {
            return Promise.resolve(false)
        }
        return Promise.resolve(true);
        /* return fetch(opt.ciscoNetworkProbeUrl, {
            method: "HEAD",
        }).then(
            function () {
                return true
            },
            function () {
                return false
            }
        ) */
    }
    function getParameters(str) {
        return (str || "")
            .replace(/(^\?)/, "")
            .split("&")
            .map(
                function (n) {
                    return (n = n.split("=")), (this[n[0]] = n[1]), this
                }.bind({})
            )[0]
    }

    function getPreferences(oauthToken) {
        var uid = queryParams.uid
        return $.ajax({
            url:
                envConfig.newsServiceUrl +
                envConfig.newsServiceBase +
                "/preferences?X-App-Token=" +
                opt.appToken +
                (uid ? "&uid=" + uid : ""),
            type: "GET",
            xhrFields: {
                withCredentials: true /* needed in this call to get csrf cookie */,
            },
            headers: {
                Authorization: "Bearer " + oauthToken,
            },
            startTime: now(),
        })
    }

    function patchPreferences(oauthToken, preferences) {
        return $.ajax({
            url:
                envConfig.newsServiceUrl +
                envConfig.newsServiceBase +
                "/preferences?X-App-Token=" +
                opt.appToken,
            type: "PATCH",
            xhrFields: {
                withCredentials: true /* needed in this call to pass csrf cookie */,
            },
            headers: {
                Authorization: "Bearer " + oauthToken,
            },
            startTime: now(),
            contentType: "application/json; charset=UTF-8",
            data: JSON.stringify(preferences),
        })
    }
    function now() {
        return performance ? performance.now() : Date.now()
    }

    function getEnvConfig() {
        var newsServers = {
            prod: {
                id: Env.Prod,
                newsServiceUrl: "https://cae-ecdnews-prod-rcdn.cisco.com",
                newsServiceBase: "/api-auth/v2",
                oauthUrl:
                    "https://id.cisco.com/oauth2/default/v1/authorize",
                oauthRedirectUrl:
                    "/c/cec/sso/token.html",
                oauthClientId: "be374b7f-0dfd-46fc-8857-953df92443d5",
                issuer: 'https://id.cisco.com/oauth2/default'
            },
            dev: {
                id: Env.Dev,
                newsServiceUrl: "https://cae-ecdnews-prod-alln.cisco.com",
                newsServiceBase: "/api-auth/v2",
                oauthUrl:
                    "https://id.cisco.com/oauth2/default/v1/authorize",
                oauthRedirectUrl:
                    "/c/cec/sso/token.html",
                oauthClientId: "be374b7f-0dfd-46fc-8857-953df92443d5",
                issuer: 'https://id.cisco.com/oauth2/default'
            },
            nprod: {
                id: Env.Nprod,
                newsServiceUrl: "https://ecdnews-dev.cloudapps.cisco.com",
                newsServiceBase: "/api-auth/v2",
                oauthUrl:
                    "https://int-id.cisco.com/oauth2/default/v1/authorize",
                oauthRedirectUrl:
                    "/c/cec/sso/token.html",
                oauthClientId: "bb3e995e-1031-427c-8d40-5356c7f29152",
                issuer: 'https://int-id.cisco.com/oauth2/default'
            },
        }

        var envConfig = newsServers.prod

        if (
            window.location.hostname.indexOf("-dev") > -1 ||
            window.location.hostname.indexOf("-stage") > -1 ||
            window.location.hostname.indexOf("-pstage") > -1 ||
            window.location.hostname.indexOf("-lt") > -1 ||
            window.location.hostname.indexOf("-pstage") > -1 ||
            window.location.hostname.indexOf("-devint") > -1
        ) {
            envConfig = newsServers.nprod
        } else if (queryParams.host && queryParams.host == "dev") {
            envConfig = newsServers.dev
        } else if (queryParams.host && queryParams.host == "nprod") {
            envConfig = newsServers.nprod
        }

        if (
            window.location.hostname.indexOf("localhost") > -1 ||
            window.location.hostname.indexOf("kakamins-") > -1
        ) {
            envConfig.oauthRedirectUrl = "/implicitGrant.html"
            envConfig.newsServiceUrl = "http://localhost:3000"
            envConfig.newsServiceBase = "/api-auth/v2"
        }

        return envConfig
    }

    function continueButtonMarkup(link, defaultConfigMetricsTitle) {
        var configMetricsTitle = getConfigMetricsTitle(link)

        return (
            "<a " +
            'class="btn ' +
            opt.skipCheckClassName +
            '" ' +
            'href="' +
            link.href +
            '" ' +
            (link.target ? 'target="' + link.target + '" ' : " ") +
            (link.title ? 'title="' + link.title + '" ' : " ") +
            trackingAttributeMarkup(
                "data-config-metrics-group",
                TrackParam.Lpos
            ) +
            trackingAttributeMarkup(
                "data-config-metrics-title",
                configMetricsTitle || defaultConfigMetricsTitle || link.id
            ) +
            ">" +
            TrackParam.LinkTextForContinue +
            "</a>"
        )
    }

    function modalButtonMarkup(
        link,
        classNames,
        text,
        defaultConfigMetricsTitle
    ) {
        var configMetricsTitle = getConfigMetricsTitle(link)
        return (
            '<button class="' +
            classNames +
            '" type="button" ' +
            trackingAttributeMarkup(
                "data-config-metrics-group",
                TrackParam.Lpos
            ) +
            trackingAttributeMarkup(
                "data-config-metrics-title",
                configMetricsTitle || defaultConfigMetricsTitle || link.id
            ) +
            ">" +
            text +
            "</button> "
        )
    }

    function modalMarkup(originalLink, defaultConfigMetricsTitle) {
        return (
            '<div id="off-network">' +
            ' <div class="window show">' +
            "  <header>" +
            "   <h4>Borderless Access</h4>" +
            modalButtonMarkup(
                originalLink,
                "close",
                TrackParam.LinkTextForClose,
                defaultConfigMetricsTitle
            ) +
            "  </header>" +
            ' <form id="off-network-form" class="off-network-form" name="off-network">' +
            '  <main class="body cui">' +
            "   <p>Zero Trust is not enabled for the page you are trying to open. Please enable VPN to access the page.</p>" +
            "   <p>Find out more about Zero Trust, read <a " +
            trackingAttributeMarkup(
                "data-config-metrics-group",
                TrackParam.Lpos
            ) +
            ' href="/c/cec/news/global-employee-headlines/less-vpn-hassle-more-security-magic.html">Less VPN Hassle. More Security Magic</a>.</p>' +
            "  </main>" +
            "  <footer>" +
            '   <div class="footer__buttons">' +
            modalButtonMarkup(
                originalLink,
                "btn close",
                TrackParam.LinkTextForStay,
                defaultConfigMetricsTitle
            ) +
            " " +
            continueButtonMarkup(originalLink, defaultConfigMetricsTitle) +
            "   </div>" +
            '   <div class="footer__checkbox">' +
            '    <label class="suppressOffNetworkWarningLabel" id="suppressOffNetworkWarningLabel">' +
            '     <input type="checkbox" id="suppressOffNetworkWarning" name="suppressOffNetworkWarning" value="1">' +
            '     <span>Don’t show this message again <span class="ecd-icon-help-alt tooltip-trigger" data-tooltip-content="suppressOffNetworkWarning-tooltip"></span></span>' +
            "    </label>" +
            "   </div>" +
            "  </footer>" +
            '  <div class="tooltip" id="suppressOffNetworkWarning-tooltip"><span class="ecd-icon-close tooltip__close"></span>You can reactivate this notification through the “Customize your feed” button on the CEC homepage under the “Settings” tab.</div>' +
            " </form>" +
            " </div>" +
            "</div>"
        )
    }

    function initTooltip(scopeSelector) {
        var $scope = $(scopeSelector)
        $(document.body).on(
            "click",
            scopeSelector + " .tooltip-trigger",
            function (event) {
                event.stopPropagation()
                var $tooltipTrigger = $(this)
                var tooltipContentElementId =
                    $tooltipTrigger.data("tooltip-content")
                var $tooltipContent = $("#" + tooltipContentElementId)

                if ($tooltipContent.hasClass("active")) {
                    $tooltipContent.fadeOut().removeClass("active")
                } else {
                    var position = $tooltipTrigger.position()
                    var width = $tooltipContent.width()
                    var height = $tooltipContent.height()
                    $tooltipContent
                        .css("top", position.top - height - 16 + "px")
                        .css("left", position.left - width / 2 + "px")
                        .fadeIn()
                        .addClass("active")
                    $tooltipContent
                        .find(".tooltip__close")
                        .one("click", function () {
                            $tooltipContent.fadeOut().removeClass("active")
                        })
                }
                return false
            }
        )
        $(document.body).on("click", function (event) {
            var $eventTarget = $(event.target)
            var clickedOutsideOfTooltip =
                !$eventTarget.hasClass("tooltip") &&
                $eventTarget.parents(".tooltip").length === 0
            if (clickedOutsideOfTooltip) {
                $scope.find(".tooltip.active").fadeOut().removeClass("active")
            }
        })
    }

    function initGlobal() {
        global.ecdigital = global.ecdigital || {}
        if (!(GlobalKey.SuppressOffNetworkWarning in global.ecdigital)) {
            global.ecdigital.suppressOffNetworkWarning = undefined
        }
        if (!(GlobalKey.OnCiscoNetwork in global.ecdigital)) {
            global.ecdigital.onCiscoNetwork = undefined
        }
    }

    function setGlobal(globalName, value) {
        global.ecdigital[globalName] = value
    }

    function getGlobal(globalName) {
        return global.ecdigital[globalName]
    }

    function shouldTrackMetrics() {
        var forceMetrics = UrlSwitch.Track in queryParams
        if (forceMetrics) return true

        var isShowingCmsPreview = !!queryParams.preview
        var envsWithTracking = [Env.Prod, Env.Nprod]
        var isEnvWithoutTracking = !envsWithTracking.includes(envConfig.id)

        if (
            isShowingCmsPreview ||
            isEnvWithoutTracking ||
            isImpersonatingUser()
        ) {
            return false
        }

        return true
    }
    function isImpersonatingUser() {
        return !!queryParams.uid
    }

    function logDebug() {
        if (UrlSwitch.Debug in queryParams) {
            console.log.apply(console, prefixConsoleOutput(arguments))
        }
    }
    function logInfo() {
        console.info.apply(console, prefixConsoleOutput(arguments))
    }

    function logError() {
        console.error.apply(console, prefixConsoleOutput(arguments))
    }

    function prependToArgumentsArray(args, item) {
        var tmp = Array.prototype.slice.call(args)
        tmp.unshift(item)
        return tmp
    }
    function prefixConsoleOutput(args) {
        return prependToArgumentsArray(
            args,
            "[Zero Trust Monitor - " +
                new Date().toISOString().replace(/\.\d{3}/, "") +
                "]"
        )
    }

    function logEnabledUrlSwitches() {
        if (UrlSwitch.Debug in queryParams) {
            logInfo("Enabled URL switches:")
            for (var switchName in UrlSwitch) {
                logInfo(
                    switchName + ":",
                    UrlSwitch[switchName] in queryParams ? "ON" : "OFF"
                )
            }
        }
    }
    
    function loadScript(url) {
        const exisistingScript = document.querySelector(`script[src="${url}"]`);

        if (
            exisistingScript && exisistingScript.promise === undefined) {
            console.log("Script is already on the page:", url);
            return Promise.resolve();
        }

        if (exisistingScript && exisistingScript.promise) {
            return exisistingScript.promise;
        }

        const script = document.createElement("script");
        script.type = "text/javascript";
        script.promise = new Promise((resolve, reject) => {
            script.src = url;
            // Attach an onload event to resolve the Promise when the script has loaded
            script.onload = function () {
            resolve();
            };
            // Attach an onerror event to reject the Promise in case of an error
            script.onerror = function () {
            reject(new Error(`Failed to load script: ${url}`));
            };
        });
        // Append the script element to the DOM (usually the head)
        document.head.appendChild(script);

        return script.promise;
    }
  
})(window, window.zeroTrustMonitorOptions || {})
