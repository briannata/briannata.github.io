if ( undefined == typeof clientlibExternal ) {
	var clientlibExternal = async () => {
		if (window.cdcext == null) {
			window.cdcext = {};
		}
	
		if (window.cdcext.host == null) {
			window.cdcext.host = 'WEM';
		}
	
		let cachebust = '';
	
		if (window.cdcext.customEnvironment != null && window.cdcext.customEnvironment !== 'prod') {
			var now = new Date();
	
			cachebust = '?t='+now.getUTCMonth()+now.getUTCDate()+now.getUTCHours();
		}
	
		// static import cannot be used outside of module script type
		await import('/etc.clientlibs/cisco-cdc/clientlibs/clientlib-external/resources/external/external.js'+cachebust);
	};
}
/**
 * @fileOverview Ratings and Comments
 * @author Mike Hitchcock <mhitchco@cisco.com>
 * @version 6.0
 */

/*jslint browser: true, devel: true, white: true, for: true, this: true */
/*global cdc, cec, _g, jQuery */
/*property
 Apr, Aug, Dec, ESummAvg, ESummTitle, ESummTotal, Feb, Jan, Jul, Jun,
 LSummBegin, LSummEndPlural, LSummEndSing, LSummMiddle, Mar, May, Nov, Oct,
 Sep, SubmitAlert, access_level, after, ajax, appToken, appTokens, append,
 appid, apptoken, attr, attributes, average_rating, blur, cache, callback,
 cdc, cec, charCodeAt, ciscoDirectory, className, click, color, comment,
 complete, concat, phl, contentType, crossDomain, css, data, debug,
 detach, dev, dir, dummy, each, emptyDetails, entitlement, envCurrent,
 envOverride, error, error_code, find, findEnvironment, float, focus,
 fromCharCode, fullName, getAllRatingsDetail, getElementById,
 getRatingsDetail, getUserProfile, givenName, hash, height, html, indexOf,
 init, join, lastIndexOf, length, listOfDataFields, location, log, match,
 max, message, min, name, noRatingYet, objectId, objectid, origin, pageSize,
 page_num, page_size, parse, pathname, prepend, prod, rac, rating,
 rating_count, ratings, ratingspage, ready, refreshSummary, reload, remove,
 replace, response, responseText, rnc_debug, rnc_dummy, rnc_env, rnc_submsg,
 rnc_titles, search, selector, serviceUrl, serviceUrls, setRatingOnForm,
 showSubmitMsg, showTitles, sn, source, split, stage, status, stringify,
 strings, style, submitMsgC, submitMsgR, submitMsgRC, substr, substring,
 success, time_stamp, title, titleOverride, total_count, type, url, userId,
 userInfoDispatcher, user_name, userid, util, val, value, version,
 withCredentials, xhrFields 
 */

if (window.cdc===undefined) { window.cdc = {}; }

cdc.rac = (function(appid){
	"use strict";

	// appid should be cdc or cec
	if (!appid) {
		if (jQuery("body.cec").length) {
			appid = "cec";
		}
		else {
			appid = "cdc";
		}
	}

	var ratingsObject = { //the object that gets returned
			version:     "6.0",
			ratingspage: {},
			entitlement: {
				'cec': 'emp',
				'cdc': 'partners'
			},
			source: {
				'cec': 'cec',
				'cdc': 'edcsnextgen'
			},
			envCurrent:  'unknown',
			cid:         '',
			redirectURL: '',
			envOverride: '',
			objectId:    '',
			configParam:  '',
			pageSize:    10,    // Default amount of comments per page
			showTitles:  false,
			showSubmitMsg: false,
			titleOverride: '',
			debug:       false, // when true, logs execution details to console
			dummy:       false, // skip service call and use freeze-dried json
			fullName:    '',
			userId:      '',
			ratingsData: {},
			refreshSummary: 1,
			ciscoDirectory: '//wwwin-tools.cisco.com/dir/details/', // Currently (May, 2017) directory does not work on https
			serviceUrl:  '',    // the serviceUrl is the url to the MDS service
			serviceUrls: {
				dev:    "https://mdx-stag.cisco.com/mdx/",
				stage:  "https://mdx-stag.cisco.com/mdx/",
				prod:   "https://mdx.cisco.com/mdx/"
			},
			appToken:  '',      // the appToken is used to handshake with the MDS service
			appTokens: {
				'cec': {
					dev:    "82c5f866e30e964bd982ccc034b71727",
					stage:  "82c5f866e30e964bd982ccc034b71727",
					prod:   "d0a713e7ca57cd394e1fbe0b2c9b391f"
				},
				'cdc': {
					dev:    "26904f709665985a113534ebf0ac6ed5",
					stage:  "26904f709665985a113534ebf0ac6ed5",
					prod:   "9b8693bd8aeac2339eef6e347528e0d5"
				}
			},
			emptyDetails: { // this is used when the ajax indicates success but has brought back a login page
				status:  "error",
				error_code: 404,
				message: "object has no ratings and comments",
				origin:  "emptyDetails"
			},
			strings: {
				cdc: {
					"rating-label":   "Rating",
					"sr-only":        ""+(Granite.I18n.get("Cisco_RnC_Comment")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_Comment")['sling:message'])+"" ,//"Comment",
					"ratings-text":   "",
					"form-spacer":    ""+(Granite.I18n.get("Cisco_RnC_RateDoc")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_RateDoc")['sling:message'])+"", //"Rate this document",
					"username-label": "Name",
					"comment-block":  "Clear All",
					"comments-count": "No rating yet",
					"ratings-submit": "Post Your Comment",
          			"ratings-post":    "Post",
					"submitMsgR":     "Thank you for rating this page.",
					"submitMsgC":     "Thank you for commenting on this page.",
					"submitMsgRC":    "Thank you for rating and commenting on this page.",
					"delCmt":         "DELETE",
					"delCmtTitle":    "Deleted",
					"delCmtMsg":      "Comment was removed by the author on ",
					"LSummBegin":     ""+(Granite.I18n.get("Cisco_RnC_AvgCustReviews")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_AvgCustReviews")['sling:message'])+"", //"Average Customer Reviews",
					"LSummMiddle":    ""+(Granite.I18n.get("Cisco_RnC_AvgOf")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_AvgOf")['sling:message'])+"", //"(Average of ",
					"LSummEndSing":   ""+(Granite.I18n.get("Cisco_RnC_Rating")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_Rating")['sling:message'])+"", //" rating)",
					"LSummEndPlural": ""+(Granite.I18n.get("Cisco_RnC_Ratings")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_Ratings")['sling:message'])+"", //" ratings)",
					"ESummTitle":     "Quality Of Article",
					"ESummTotal":     "Total Rating",
					"ESummAvg":       "Average Rating",
					"SubmitAlert":    ""+(Granite.I18n.get("Cisco_RnC_ProvideRnC")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_ProvideRnC")['sling:message'])+"" //"Please provide either a rating or a comment"
				},
				cec: {
					"rating-label":   "Share your Comments on this news article.",
					"sr-only":        ""+(Granite.I18n.get("Cisco_RnC_Comment")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_Comment")['sling:message'])+"" ,//"Comment",
					"ratings-text":   "Comment on this news article.",
					"form-spacer":    ""+(Granite.I18n.get("Cisco_RnC_RateDoc")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_RateDoc")['sling:message'])+"", //"( Rate this document )",
					"username-label": "Name",
					"comment-block":  "Clear All",
					"comments-count": "",
					"ratings-submit": "Submit",
					"submitMsgR":     "Thank you for rating this article.",
					"submitMsgC":     "Thank you for commenting on this article.",
					"submitMsgRC":    "Thank you for rating and commenting on this article.",
					"delCmt":         "DELETE",
					"delCmtTitle":    "Deleted",
					"delCmtMsg":      "Comment was removed by the author on ",
					"LSummBegin":     ""+(Granite.I18n.get("Cisco_RnC_AvgCustReviews")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_AvgCustReviews")['sling:message'])+"", //"Average Customer Reviews",
					"LSummMiddle":    ""+(Granite.I18n.get("Cisco_RnC_AvgOf")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_AvgOf")['sling:message'])+"", //"(Average of ",
					"LSummEndSing":   ""+(Granite.I18n.get("Cisco_RnC_Rating")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_Rating")['sling:message'])+"", //" rating)",
					"LSummEndPlural": ""+(Granite.I18n.get("Cisco_RnC_Ratings")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_Ratings")['sling:message'])+"", //" ratings)",
					"ESummTitle":     "Quality Of Article",
					"ESummTotal":     "Total Rating",
					"ESummAvg":       "Average Rating",
					"SubmitAlert":    ""+(Granite.I18n.get("Cisco_RnC_ProvideRnC")['sling:message']===undefined ? "" : Granite.I18n.get("Cisco_RnC_ProvideRnC")['sling:message'])+"" //"Please provide either a rating or a comment"
				},
				selector: {
					"rating-label":   "label.rating-label",
					"sr-only":        "label.sr-only",
					"ratings-text":   "textarea#ratings-text", // [both value and data-placeholder attr]
					"form-spacer":    "div.ratings-stars-form span.spacer",
					"username-label": "label.username-label",
					"comments-count": "div.comments-count",
					"comment-block":  "div.comment-block a",
					"ratings-submit": "input#ratings-submit", // value attr
          			"ratings-post":   "input#ratings-post", // value attr
					"sub-label":      "div.form-group span.sub-label",
				}
			}
		},
		activeParams = { // handlers for the querystring params we want to react to
			'rnc_debug':  function(input) { ratingsObject.debug = input ? true : false; },
			'rnc_dummy':  function(input) { ratingsObject.dummy = input ? true : false; },
			'rnc_submsg': function(input) { ratingsObject.showSubmitMsg = true; },
			'rnc_titles': function(input) { ratingsObject.titleOverride = input; },
			'rnc_env':    function(input) { ratingsObject.envOverride   = input; }
		};

	function debugLog (msg, msg2) {
		if (ratingsObject.debug) {
			if(typeof msg === "object") {
				if (JSON) {
					console.dir(JSON.parse(JSON.stringify(msg)));
				}
				else {
					console.dir(msg);
				}
			}
			else {
				if (!msg2) { msg2 = ""; }
				console.log(msg, msg2);
			}
		}
	}

	ratingsObject.debugLog = debugLog;

	function parseParams () {
		jQuery.each(
			location.search.substr(1).split("&"),
			function(index,item) {
				var keyval = item.split("=");

				if (activeParams[keyval[0]]) {
					activeParams[keyval[0]](keyval[1]);
					if (keyval[0] === "debug") {
						debugLog("in parseParams(), debug mode activated");
					}
				}
				debugLog("-- parsed chunk #" + index + " ('" + item + "')");
			}
		);
	}

	function getEmptyDetailsObject() {
		return ratingsObject.emptyDetails;
	}

	/** getStars returns the raw string html of the renderd start
	 *   @param {number} avg The average that you would like to render
	 *   @return {string} The html that will be injected onto the page */
	function getStars(avg) {
		if((jQuery("body").hasClass("cdc-eot-toc"))){
			var starWidth = 23;
		}	else {
			var starWidth = 14;
		}
		var	spanWidth = Math.max(0, (Math.min(5, avg))) * starWidth;
		debugLog("in getStars(" + avg + ")");
		return "<span class='stars-small'><span style='width: " + spanWidth + "px' class='full-stars'></span></span>";
	}

	function getDummyJson() {
		return { objectid: "_c_cec_news_global-employee-headlines_cec-rnc-wire-test-populated_html", status: "success", error_code: 0, message: "", average_rating: 2.6, total_count: 9, rating_count: 5, "5_star_count": 1, "4_star_count": 1, "3_star_count": 0, "2_star_count": 1, "1_star_count": 2, page_size: 10, page_num: 1, ratings: [ { userid: "bthunga", user_name: "Balasundrarao Thunga", time_stamp: "2015-06-29T21:40:33Z", rating: 2, title: "default title", comment: "" }, { userid: "mhitchco", user_name: "Michael Hitchcock", time_stamp: "2015-02-04T16:33:28Z", rating: 4, title: "default title", comment: "Mike's amazing comment" }, { userid: "rothomso", user_name: "Rodney Thomson", time_stamp: "2014-11-18T00:53:54Z", rating: 0, title: "check the licensing guide here, https://www.cisco.com/c/en/us/td", comment: "check the licensing guide here, https://www.cisco.com/c/en/us/td/docs/switches/datacenter/sw/nx-os/licensing/guide/b_Cisco_NX-OS_Licensing_Guide/b_Cisco_NX-OS_Licensing_Guide_chapter_01.html " }, { userid: "nlancha", user_name: "Nelson Lancha", time_stamp: "2014-10-20T14:08:01Z", rating: 1, title: "Native Layer 3, means no L3 license needed?", comment: "Native Layer 3, means no L3 license needed?" }, { userid: "dplotkin", user_name: "Dmitry Plotkin", time_stamp: "2014-10-01T14:32:56Z", rating: 1, title: "no licensing info!", comment: "no licensing info!" }, { userid: "gthjohansson", user_name: "Gudmundur Johannsson", time_stamp: "2014-09-30T15:42:05Z", rating: 0, title: "Where are the license descriptions ? ", comment: "Where are the license descriptions ? " }, { userid: "mpoTelindus", user_name: "Michael Poulet", time_stamp: "2014-09-04T08:27:35Z", rating: 0, title: "What about fiber channel informations (licence, speed 4/8 G, tra", comment: "What about fiber channel informations (licence, speed 4/8 G, transceivers SW/LW...)?" }, { userid: "fwatson", user_name: "fwatson", time_stamp: "2014-09-02T18:44:16Z", rating: 0, title: "Where are the software license descriptions?", comment: "Where are the software license descriptions?" }, { userid: "kdecaluwe", user_name: "KEES DE CALUWE", time_stamp: "2014-07-28T12:26:55Z", rating: 5, title: "", comment: "" } ] };
	}

	//_______________________________________________________
	//______________  SERVICE CALLS _________________________
	//_______________________________________________________

	/** putrating(objectid,rating,comment,returnFunction,token)
	 *   @param {string} objectid The object id
	 *   @param {number} rating the number selected by the user to rate the document
	 *   @param {string} comment text from the input feild a user comment
	 *   @param {function} returnFunction callback to be called
	 *   @param {string} token which is to be passed in header for ping enabled apis
	 */

	function putrating(objectid,source,rating,title,comment,returnFunction,token){
		var service = ratingsObject.serviceUrl +"rest/putrating",
			requestJSON,
			headers = (token)?{"Authorization":token}:{};

		debugLog("in putrating(): objectid='"+objectid+"', source='"+source+"', rating='"+rating+"', title='"+title+"', comment='"+comment+"', entitlement='"+ratingsObject.entitlement[appid]+"', service_url='"+service+"'");

		rating += ""; // cast as string?
		requestJSON = {
			"appid": appid,
			"apptoken":ratingsObject.appToken,
			"ratings":[{
				           "objectid":objectid,
				           "source":source,
				           "access_level":ratingsObject.entitlement[appid],
				           "title":title,
				           "operation": "add"
			           }]
		};

		// new API: only send rating if we have a value (Mingle #11580)
		if (rating && rating !== "") {
			requestJSON.ratings[0].rating = rating;
			debugLog(" -- rating is defined, adding to request JSON");
		}
		else {
			debugLog(" -- rating is NOT defined, NOT adding to request JSON");
		}

		// new API: only send comment if we have a value (Mingle #11580)
		if (comment && comment !=="") {
			requestJSON.ratings[0].comment = comment;
			debugLog(" -- comment is defined, adding to request JSON");
		}
		else {
			debugLog(" -- comment is NOT defined, NOT adding to request JSON");
		}

		debugLog(JSON.stringify(requestJSON));

		jQuery.ajax({
			type: "POST",
			url: service,
			contentType : "text/plain;charset=UTF-8",
			headers: headers,
			data: JSON.stringify(requestJSON),
			xhrFields: {
				withCredentials: true
			},
			success: function (data) {
				debugLog("putrating() ajax: Success", data);
				returnFunction(data); // default is submitDone()
				jQuery('#fw-overlay').css({'position':'absolute','display':'block', 'z-index':'1000'});
				jQuery('body').append('<img class="rnc-spinner" src="/etc/designs/cdc/fw/i/spinner.gif" alt="..." />');
				setTimeout(function(){ 
					location.hash='';
					window.location.reload(true);
				}, 5000);
			},
			complete: function() {
				debugLog("putrating() ajax: AJAX call is complete");
			},
			error:function (xhr, ajaxOptions, thrownError){
				//var currentpath=window.location.pathname;
				//var loginurl="/c/login/index.html?referer="+encodeURIComponent(currentpath);
				debugLog("putrating() ajax: ERROR or no data: ", thrownError);
				debugLog("ajaxOptions: ", ajaxOptions);
				debugLog("xhr: ", xhr);
				if(xhr.status===404) {
					debugLog("-- error 404");
				}
				if(xhr.status===302) {
					debugLog("-- error 302");
				}
				debugLog(xhr);

				// was loginRedirect()
				//window.location.href =loginurl;
			}
		});
	}

	/** ratingsObject.getRatingsDetail(objectid,page_num,returnFunction,token)
	 *   @param {string} object id
	 *   @param {number} page_num the page that the user would like to display
	 *   @param {function} returnFunction callback to be called
	 *   @param {string} token which is to be passed in header for ping enabled apis
	 */

		// this is called from two places in getAllRatingsDetail(), which itself defines
		// an inner function 'recursiveAjax' and sends that in as the 'returnFunction' param
	ratingsObject.getRatingsDetail=function(objectid,page_num,returnFunction,token){
		debugLog("in getRatingsDetail()");
		if (ratingsObject.dummy) {
			debugLog(" -- in dummy mode, skipping service call and using canned json");
			return returnFunction(getDummyJson());
		}

		var service = ratingsObject.serviceUrl + ratingsObject.entitlement[appid] + "/"+ appid + "/" + objectid + "_"+ page_num +".json";
		if(typeof returnFunction !== "function") { debugLog("return function not defined"); }
		debugLog(" -- calling service via ajax [" + service + "]");
		var headers = (token)?{"Authorization":token}:{};
		jQuery.ajax({
			//timeout:3000,
			url: service,
			cache: false,
			headers: headers,
			//contentType: "application/json",
			contentType: "text/plain;charset=UTF-8", // as per Siva Kurapati (sivakura)
			xhrFields: {
				withCredentials: true
			},
			crossDomain: true,
			success: function(data){
				// if ObSSO expires, we will get a login page back...
				if (typeof data === "string") {
					debugLog("getRatingsDetail() ajax: Success; but data is string: ", data);
					data = getEmptyDetailsObject();
					debugLog("-- set data to empty object: ", data);
				}
				else {
					debugLog("getRatingsDetail() ajax: Success; data: ", data);
				}
				debugLog(data);
				returnFunction(data);
			},
			error:function (xhr, ajaxOptions, thrownError){
				//var loginurl= domain + "/c/login/index.html?referer="+currentpath;
				//var loginurl="//fdk-stage.cisco.com/c/login/index.html";
				debugLog("getRatingsDetail() ajax: ERROR or no data: ", thrownError);
				debugLog("ajaxOptions: ", ajaxOptions);
				debugLog("xhr: ", xhr);
				if(xhr.status===404) {
					debugLog("-- status: 404");
				}
				if(xhr.status===0) {
					debugLog("-- status: 0");
				}
				if(xhr.status===200) {
					debugLog("-- status: 200, calling returnFunction with response");
					returnFunction(xhr.responseText);
				}

				//window.location.href =loginurl;
			},
			complete:function(){
				debugLog("getRatingsDetail AJAX call is complete");
			}
		});
		debugLog("exit getRatingsDetail()");
	};

	// called from init(), returnFunction is 'mainDisplayComments'
	ratingsObject.getAllRatingsDetail=function(objectid,returnFunction,token){
		var returnData={},
			count=1;

		debugLog("in getAllRatingsDetail()");
		function recursiveAjax(data){
			debugLog("in inner recursiveAjax()");
			debugLog(" -- incoming data:", data);
			debugLog(" -- Token is:", token);
			//SAVE THE NEW DATA FIRST
			if(count===1){
				returnData=data;
			}
			else if(data.ratings !== undefined){
				returnData.ratings=returnData.ratings.concat(data.ratings);
			}
			//Check if we need to call it again, aka there are 10 items on the page
			if(data.ratings !== undefined){
				if(data.ratings.length>=ratingsObject.pageSize){
					//Calculate the new page number
					count+=1;
					var page_num="";
					if(count<=9){
						page_num="0";
						page_num+=count;
					}
					else{ page_num=String(count);}
					debugLog(" -- need to call getAllRatingsDetail() again for page "+page_num);
					//make a new call for the next page
					//with a recursive fail safe
					ratingsObject.getRatingsDetail(objectid,page_num,recursiveAjax,token);
				}
				else{
					debugLog("exit inner recursiveAjax() and call returnFunction on returnData:", returnData);
					debugLog(returnData);
					returnFunction(returnData); // passed into parent function getAllRatingsDetail() as 'mainDisplayComments'
				}
			}
			//Handles the case where there are 10
			else{
				debugLog("exit inner recursiveAjax() and call returnFunction on returnData:", returnData);
				debugLog(returnData);
				returnFunction(returnData);
			}
			debugLog("exit inner recursiveAjax()");
		}
		debugLog("calling getRatingsDetail(" + objectid + "), with callback to inner recursiveAjax()");
		ratingsObject.getRatingsDetail(objectid,"01",recursiveAjax,token);
		debugLog("exit getAllRatingsDetail()");
	};




	/** Submit done probably reloads the ratings
	 */
	function submitDone (data){
		if(data.error_code===0){
			debugLog("submitDone(): error_code is 0, should reload page", data);
		}
		else{
			debugLog("submitDone(): error_code is not 0, should hit login page", data);
		}

		// POPUP MESSAGE GOES HERE
	}

	/** Displays The average and total ratings right above all the comments
	 *   @memberof cdc.rac.ratingspage
	 *   @param {number} avg the average rating
	 *   @param {number} total the total number of ratings
	 *   @private
	 */
	function displayLowerSummary (avg,total_ratings,total_comments){
		console.log(total_comments);
		var override,
			str    = ratingsObject.strings[appid],
			endStr = (total_ratings>1) ? 'LSummEndPlural' : 'LSummEndSing';

		debugLog("in displayLowerSummary()...");

		// fix up R&C average at bottom of page (OOB component uses zero-stars entries to calculate average)
		if(total_ratings || total_comments){
			debugLog(" -- there are ratings and/or comments, do override on RAC average and count");
			debugLog(" -- new avg=[" + avg + "]; new count=[" + total_ratings + "]");
			if((jQuery("body").hasClass("cdc-eot-toc"))){
			override = str.LSummBegin + "<div class='stars_average_div ratings-stars clearfix'>" +
				getStars(avg) + "<span class='lower-avg-rating'>("+avg+")</span></div>\n";
			} else {
				override = str.LSummBegin + "<hr><div class='stars_average_div ratings-stars clearfix'>" +
					getStars(avg) + "<span class='normal-text'>" +
					str.LSummMiddle + total_ratings + str[endStr] + "</span></div>\n";
			}
			debugLog("Override: " + override);
			jQuery("div.comments-count").html(override);
		}
		else {
			debugLog(" -- no ratings nor comments, no need for avg/count override");
		}
		debugLog("end displayLowerSummary()");
	}

	function getStarProgress(totalcount,starcount) {
		if (!starcount) {
			starcount = 0;
		}
		var starCount = parseInt(starcount,10),
			totalCount = parseInt(totalcount,10),
			starProgress = starCount*100/totalCount;
		return starProgress;
	}


	/** Displays The average and total ratings at the top of any eot page
	 *   @memberof cdc.rac.ratingspage
	 *   @param {number} total the total number of ratings
	 *   @param {number} avg the average rating
	 *   @private
	 */

	function displayEOTSummary (total,avg,ratingsData,total_comments){
		debugLog("in displayEOTSummary(), total=["+total+"]; avg=["+avg+"]");
		var selector,
			index = 0,
			summaryHtml,
			str = ratingsObject.strings[appid];

		if (appid === 'cec') {
			summaryHtml =
				'<a name="rnc-summary"></a>' + "\n" +
					'<div class="ratings rnc-summary rnc-summary-cec" onclick="window.location.hash=\'rnc-form\';" style="cursor:pointer">' + "\n" +
					'    <div class="ratings-stars">' + "\n" +
					'        <span class="stars-small sum_starlist"><span class="ratings-stars">'+getStars(avg)+'</span></span>'+"\n"+
					'        <span class="spacer">( ' + avg + ' )</span>' + "\n" +
					'        <span class="icon-comments"></span>' + "\n" +
					'        <span class="spacer">( ' + total + ' )</span> ' + "\n" +
					'    </div>' + "\n\n" +
					'    <div class="rnc-summary-tooltip">' + "\n" +
					'        <h3>' + str.ESummTitle + '</h3>' + "\n" +
					'        <div class="sum_totaltxt">' + str.ESummTotal + '(' + total +
					')</div><div class="sum_avgtxt">' + str.ESummAvg + '&nbsp;(' + avg + ')</div>' + "\n" +
					'        <div class="ratings-stars">' + "\n" +
					'            <span class="stars-small sum_starlist"><span style="width: 70px" class="full-stars"></span></span>' + "\n" +
					'            <span class="sum_ratingcount"><progress value="' + getStarProgress(total,ratingsData["5_star_count"]) + '" max="100"></progress>&nbsp;&nbsp;(' + (ratingsData["5_star_count"] || 0) + ')</span>' + "\n" +
					'        </div> ' + "\n" +
					'        <div class="ratings-stars">' + "\n" +
					'            <span class="stars-small sum_starlist"><span style="width: 56px" class="full-stars"></span></span>' + "\n" +
					'            <span class="sum_ratingcount"><progress value="' + getStarProgress(total,ratingsData["4_star_count"]) + '" max="100"></progress>&nbsp;&nbsp;(' + (ratingsData["4_star_count"] || 0) + ')</span>' + "\n" +
					'        </div>' + "\n" +
					'        <div class="ratings-stars">' + "\n" +
					'            <span class="stars-small sum_starlist"><span style="width: 42px" class="full-stars"></span></span>' + "\n" +
					'            <span class="sum_ratingcount"><progress value="' + getStarProgress(total,ratingsData["3_star_count"]) + '" max="100"></progress>&nbsp;&nbsp;(' + (ratingsData["3_star_count"] || 0) + ')</span>' + "\n" +
					'        </div>' + "\n" +
					'        <div class="ratings-stars">' + "\n" +
					'            <span class="stars-small sum_starlist"><span style="width: 28px" class="full-stars"></span></span>' + "\n" +
					'            <span class="sum_ratingcount"><progress value="' + getStarProgress(total,ratingsData["2_star_count"]) + '" max="100"></progress>&nbsp;&nbsp;(' + (ratingsData["2_star_count"] || 0) + ')</span>' + "\n" +
					'        </div>' + "\n" +
					'        <div class="ratings-stars"> ' + "\n" +
					'            <span class="stars-small sum_starlist"><span style="width: 14px" class="full-stars"></span></span>' + "\n" +
					'            <span class="sum_ratingcount"><progress value="' + getStarProgress(total,ratingsData["1_star_count"]) + '" max="100"></progress>&nbsp;&nbsp;(' + (ratingsData["1_star_count"] || 0) + ')</span>' + "\n" +
					'        </div>' + "\n" +
					'    </div>' + "\n" +
					'</div>';

			if(jQuery("div#floatrail").length) {
				selector = "div#floatrail";
			}
			else if(jQuery("div.col.full").length) {
				selector = "div.col.full";
			}
			else if(jQuery(".eot-rendition-cq.eotrenditions").length) {
				summaryHtml = '<div id="floatrail"><div class="parsys floatrailparsys"></div>' +
					summaryHtml + '</div>';
				selector = ".eot-rendition-cq.eotrenditions";
			}

			// CEC-only: we need to insert a comment-count summary right above the form
			jQuery("#ratings").prepend('<a name="rnc-form"></a><div class="ratings-stars" style="cursor:pointer" onclick="window.location.hash=\'rnc-summary\';"><span class="icon-comments"></span><span class="spacer">( ' + total + ' )</span></div>' + "\n");
		} // end 'if appid is cec'

		else if (appid === 'cdc') {
			//commeting below line for time being as localization is not yet initiated for master brand pages
			//var viewRatingsCommentsKey=Granite.I18n.get("Cisco_View_Comments_And_Ratings")['sling:message
			if((jQuery("body").hasClass("cdc-eot-toc"))){
				summaryHtml =
				'<div class="eot-toc-rnc-container"><div class="eot-toc-comments-container"><div class="eot-toc-comments-icon"></div><a href="#rnc-form"><span class="spacer eot-toc-comments-count">('+total_comments+')</span></a><div class="rnc-summary-x20"></div></div>' + "\n" +
						'<div class="eot-toc-ratings-container"><div class="ratings rnc-summary rnc-summary-cdc">' + "\n" +
						'    <div class="ratings-stars">' + "\n" +
						'        <span class="stars-small sum_starlist"><span class="ratings-stars">'+getStars(avg)+'</span></span>'+"\n"+
						'        <a href="#rnc-form"><span class="spacer eot-toc-ratings-count">( ' + avg + ' )</span></a>' + "\n" +
						'    </div>' + "\n\n" +
						'</div></div></div>';
			}
			else {
				summaryHtml =
					'<a name="rnc-summary"></a>' + "\n" +
						'<div class="ratings rnc-summary rnc-summary-cdc">' + "\n" +
						'    <h2>Rating</h2>' + "\n" +
						'    <div class="ratings-stars">' + "\n" +
						'        <span class="stars-small sum_starlist"><span class="ratings-stars">'+getStars(avg)+'</span></span>'+"\n"+
						'        <span class="spacer">( ' + total + ' )</span>' + "\n" +
						'    </div>' + "\n" +
						'    <div><a href="#rnc-form">View Comments and Ratings</a></div>' + "\n\n" +
						'</div>';
			}

			if (jQuery("table#content-top-right").length) {
				summaryHtml = '<tr><td valign="top" align="right">' +
					summaryHtml + "</td></tr>\n";
				selector = "table#content-top-right tr";
			}
			else if(jQuery("div#floatrail").length && jQuery("div.htmlcontainer").length) {
				selector = "div#floatrail";
				//jQuery("#se-ratings-summary").css("visibility","visible").show();
			}
			else if (jQuery("div.eot-feedback").length){
				selector = "div.eot-feedback";
			}
			//else if(jQuery("div.parsys_rail").length) {
			//   selector = "div.parsys_rail";
			//}
			else if(jQuery("div.rightRailComponent").length) {
				selector = "div.rightRailComponent";
			}
			/*
			else if(jQuery("div.col.third").length && jQuery(".cdc-eot").length) {
				selector = "div.col.third";
			}
			else if(jQuery("div.col.quarter").length) {
				selector = "div.col.quarter";
				index = 1;
			}
			*/
			else {
				summaryHtml = '<div id="floatrail">' +
					'<div class="parsys floatrailparsys"></div>' +
					summaryHtml + "</div>\n";
				selector = ".eot-rendition-cq.eotrenditions";
				//jQuery("#se-ratings-summary").css("visibility","visible").show();
			}

			jQuery("#ratings").prepend('<a name="rnc-form"></a>' + "\n");
		}

		//debugLog("selector: " + selector);
		//debugLog("summaryHtml: " + summaryHtml);
		jQuery(jQuery(selector)[index]).append(summaryHtml);

		//jQuery(".rnc-summary").click(function(){console.log("click!");window.location.hash="rnc-form";});

		debugLog("end display()");
	}

	function formatSeDate (date) {
		var MM = {Jan:"January", Feb:"February", Mar:"March", Apr:"April", May:"May", Jun:"June", Jul:"July", Aug:"August", Sep:"September", Oct:"October", Nov:"November", Dec:"December"},
			strDate = String(new Date(date)).replace(/\w{3}\ (\w{3})\ (\d{2})\ (\d{4})\ (\d{2}):(\d{2}):[^(]+\(([A-Z]{3})\)/,function($0,$1,$2,$3,$4,$5){
				return MM[$1]+" "+$2+", "+$3+"  "+$4%12+":"+$5+(+$4>12?" PM":" AM");
			});
		return strDate;
	}

	/** Displays a single comment
	 *   @memberof cdc.rac.ratingspage
	 *   @param {object} obj
	 *   @private
	 */
	function displayComment (obj) {
		debugLog("     - in displayComment()");
		var template = '<div class="ratingAndComment">' + "\n" +
			'  <div class="comment-header"><div class="user">';

		if (appid === "cec") {
			template += '<a target="_blank" rel="noopener noreferrer" href="' +
				ratingsObject.ciscoDirectory + obj.userid + '">' +
				obj.user_name + '</a>';
		}
		else {
			template += obj.user_name;
		}

		/* if user's own comment, include option to delete */

		if ((obj.userid === ratingsObject.userid) && (obj.title !== "Deleted")) {
			template += '<span class="comment-delete" data-commentid="' + obj.comment_id + '" id="' + obj.userid + '">' + ratingsObject.strings[appid].delCmt + '</span>';
		}

		template += '</div></div>';

		if (ratingsObject.showTitles) {
			template  += "<div class='comment-title'>"+obj.title+"</div>";
		}
		else {
			debugLog("-- showTitles is false, not showing title '" + obj.title + "'");
		}

		template  += "<div class='comment-body'>"+obj.comment+"</div>";
		if (obj.rating) {
			template  += "<div class='ratings-stars'>" + getStars(obj.rating) + "</div>";
		}
		template  += "<span class='comment-header-meta'><div class='comment-header-time' ";
		template  += "title='Permalink'>"+ formatSeDate(obj.time_stamp) +"</div></span>";

		debugLog("     - comment as html:\n", { 'html': template });
		jQuery(".comments").append(template);
		jQuery(".comment-delete").off("click")
		jQuery(".comment-delete").click( function(){deleteComment(this);} )
	}


	/** Called as a callback and takes the response data
	 *   @memberof cdc.rac.ratingspage
	 *   @param {object} data the response data to getrating
	 *   @private
	 *
	 * Note: if page has no ratings or comments, the response json looks like this:
	 *         {
    *           status: "error",
    *           error_code: 404,
    *           message: "object has no ratings and comments"
    *         }
	 */
	function mainDisplayComments (data){
		var response=data,
			total_ratings,average_rating,ratings,
			total_comments = 0,
			total_count = 0,
			r = ratingsObject;

		if (typeof data === "string") {
			debugLog("data came in as a string, using JSON.parse()");
			response = JSON.parse(data);
		}

		//debugLog("mainDisplayComments(): json data: " + JSON.stringify(response));
		debugLog("mainDisplayComments(): json response is " + typeof response + ": ", response);
		if (response.error_code === 404) { // no ratings nor comments for this page
			debugLog(" - error_code is 404, no previous rnc, setting counts to zero");
			//page_size      = 0;
			total_ratings  = 0;
			average_rating = 0;
		}
		else {
			total_ratings = response.rating_count;
			total_count   = response.total_count;
			if (total_ratings === undefined) {
				total_ratings = response.total_count;
			}
			average_rating=response.average_rating;

			if (typeof cec !== "undefined" && cec && cec.userInfo && cec.userInfo.info) {
				debugLog("  - cec.userInfo.info defined, using that instead of UID data");
				r.fullName = cec.userInfo.info.givenName + ' ' + cec.userInfo.info.sn;
				debugLog("  - user's fullname is '" + ratingsObject.fullName + "'");
			}

			// NOTE: currentPagenum never gets set after initialization to '1'...
			//       also, page_size is only used here
			//       and finally, this 'if' has NO BODY!
			//page_size=response.page_size;
			//if (currentPagenum<= response.total_count/page_size){
			//    debugLog("showLoadmore");
			//}

			ratings = jQuery(response.ratings);
			debugLog(" - start iterating over ratings array of objects, current fullName=[" + r.fullName + "]");
			jQuery.each(ratings, function(i,e){
				// new req: if the user has a previous rating, prepopulate the form with it
				r.ratingsData[e.user_name] = e.rating; // stash if needed by UID callback
				debugLog("   - " + i + ": this user's name: [" + e.user_name + "]");

				if (e.user_name === r.fullName) {
					if (e.rating) {
						debugLog("     - found user's rating value, prepopulating form to a rating of " + e.rating);
						cdc.rac.ratingspage.setRatingOnForm('ratings', e.rating);
					}
					/*if (e.comment) {
						debugLog("     - found user's comment value, prepopulating textfield to a comment of " + e.comment);
						jQuery("#ratings-text").html(e.comment);
					}*/
				}

				// new req: don't render if just a rating with no comment
				if (ratingsObject.configParam.ratingsOnly==false && (e.comment && !e.comment.match(/^\s*$/))) {
					debugLog("     - calling displayComment() with: ", JSON.stringify(e));
					displayComment(e);
					total_comments++;
				}
				else {
					debugLog("     - no comment, so NOT calling displayComment() with: ", JSON.stringify(e));
				}
			});
		}

		if(ratingsObject.refreshSummary === 1){
			displayLowerSummary(average_rating,total_ratings,total_comments);
			displayEOTSummary(total_ratings,average_rating,response,total_comments);
			ratingsObject.refreshSummary = 0;
		}

		// DE1954: if a comment or rating has been submitted, display a notice message
		/* if (window.sessionStorage && sessionStorage.getItem("racMessageState")==="1") {
		 *    (function(){
		 *       var notice_header = "Notice",
		 *           notice_text = "It may take a few minutes for recently submitted ratings or comments to display.",
		 *           notice = jQuery(
		 *             '<div id="a03v7" class="clb a03 a03v7"><span style="top:5px;" ' +
		 *             'class="a03-icon a03-alert"></span> <h2>' +
		 *             notice_header +
		 *             '</h2><p style="margin-left:50px;" class="compact">' +
		 *             notice_text +
		 *             '</p></div>'
		 *           ),
		 *           node = jQuery("#a03v7");
		 *
		 *       jQuery("#rac-form").append(notice);
		 *       jQuery("body").scrollTop(node.offset().top-jQuery("body").offset().top+jQuery("body").scrollTop());
		 *       sessionStorage.setItem("racMessageState","0");
		 *    }());
		 * }
		 */
	}

	function submitMessage(rating,comment) {
		if (! ratingsObject.showSubmitMsg) {
			debugLog("submitMessage(): flag is false, no post-submit pop-up");
			return;
		}

		debugLog("submitMessage(): flag is true, showing post-submit pop-up");

		if (rating && !comment) {
			alert(ratingsObject.strings[appid].submitMsgR);
		}
		else if (comment && !rating) {
			alert(ratingsObject.strings[appid].submitMsgC);
		}
		else {
			alert(ratingsObject.strings[appid].submitMsgRC);
		}
	}

	function submitNewRating (){
		//gather all the data needed
		var source  = ratingsObject.source[appid],
			rating  = jQuery("#ratings-rating").val(),
			comment = (jQuery("#ratings-text").val()  === jQuery("#ratings-text").attr('data-placeholder'))  ? "" : jQuery("#ratings-text").val(),
			title   = "";

		//#US143698
        if(ratingsObject.configParam.source !== undefined && ratingsObject.configParam.source !== ""){
            source = ratingsObject.configParam.source;
        }

		if (jQuery("#ratings-title").length) {
			title = (jQuery("#ratings-title").val() === jQuery("#ratings-title").attr('data-placeholder')) ? "" : jQuery("#ratings-title").val();
		}

		debugLog("in submitNewRating");
		debugLog("rating=["+rating+"]; comment=["+comment+"]; title=["+title+"]; source=["+source+"]");

		if( rating==="" && comment===""){
			alert( ratingsObject.strings[appid].SubmitAlert );// Need to replace alert with  modal or error message. will Check with nathan..
			return true;
		}

		// following used for displaying notice after reload, DE1954
		//if (window.sessionStorage) {
		//   sessionStorage.setItem("racMessageState","1");
		//}
        clientlibExternal().then(() => {
    		 cdc.sso.hasAuthHeader().then(function(token){
				if (token) {
        		 	debugLog("-- Access token used in submitNewRating is:"+token);
		        	putrating(ratingsObject.objectId,source,rating,title,comment,submitDone,token);
				}
			 });
		  });

		submitMessage(rating,comment);

		return false;
	}


	function deleteComment (cmt){
		var service = ratingsObject.serviceUrl +"rest/putrating",
			requestJSON;
		var source  = ratingsObject.source[appid];
		var objectid = jQuery(cmt).attr("id");
		var commentid = jQuery(cmt).attr("data-commentid");
		var delTime = new Date();

		//#US143698
        if(ratingsObject.configParam.source !== undefined && ratingsObject.configParam.source !== ""){
            source = ratingsObject.configParam.source;
        }

		requestJSON = {
			"appid": appid,
			"apptoken":ratingsObject.appToken,
			"ratings":[{
				           "objectid":getObjectId(),
				           "source":source,
				           "access_level":ratingsObject.entitlement[appid],
				           "title":ratingsObject.strings[appid].delCmtTitle,
				           "comment":ratingsObject.strings[appid].delCmtMsg + new Date,
				           "comment_id": commentid,
				           "operation": "delete",
			           }]
		};

        clientlibExternal().then(() => {
    		 cdc.sso.hasAuthHeader().then(function(token){
				if (token) {
					debugLog("-- Access token used in deleteComment is:"+token);
					var headers = (token)?{"Authorization":token}:{};
					jQuery.ajax({
						type: "POST",
						url: service,
						contentType : "text/plain;charset=UTF-8",
						headers: headers,
						data: JSON.stringify(requestJSON),
						xhrFields: {
							withCredentials: true
						},
						success: function (data) {
							debugLog("deleteComment() ajax: Success", data);
							submitDone(data);
							jQuery('#fw-overlay').css({'position':'absolute','display':'block', 'z-index':'1000'});
							jQuery('body').append('<img class="rnc-spinner" src="/etc/designs/cdc/fw/i/spinner.gif" alt="..." />');
							setTimeout(function(){ 
								location.hash='';
								window.location.reload(true);
							}, 5000);
						},
						complete: function() {
							debugLog("deleteComment() ajax: AJAX call is complete");
						},
						error:function (xhr, ajaxOptions, thrownError){
							//var currentpath=window.location.pathname;
							//var loginurl="/c/login/index.html?referer="+encodeURIComponent(currentpath);
							debugLog("deleteComment() ajax: ERROR or no data: ", thrownError);
							debugLog("ajaxOptions: ", ajaxOptions);
							debugLog("xhr: ", xhr);
							if(xhr.status===404) {
								debugLog("-- error 404");
							}
							if(xhr.status===302) {
								debugLog("-- error 302");
							}
							debugLog(xhr);
		
							// was loginRedirect()
							//window.location.href =loginurl;
						}
					});
				}
		  });
		}); 		
		return false;
	}


	/** textareaFocusHandler changes the text of the ratings form
	 *   @param {object} the element in question
	 */

	function textareaFocusHandler(elem) {
		var placeholder = jQuery(elem).attr('data-placeholder');

		//debugLog("in textareaFocusHandler(); placeholder=[" + placeholder + "]\nvalue=[" + elem.value + "]");
		if (elem.value === placeholder) {
			elem.value = "";
		}
		elem.style.color = "#333";
	}


	/** textareaBlurHandler changes the text of the ratings form
	 *   @param {object} the element in question
	 */

	function textareaBlurHandler(elem) {
		var placeholder = jQuery(elem).attr('data-placeholder');

		//debugLog("in textareaBlurHandler(); placeholder=[" + placeholder + "]\nvalue=[" + elem.value + "]");
		if (elem.value === "") {
			elem.value = placeholder;
			elem.style.color = "#888";
		}
		else {
			elem.style.color = "#333";
		}
	}

	function clearInputs() {
		cdc.rac.ratingspage.setRatingOnForm('ratings', 0);
		jQuery("#ratings-title").val('');
		jQuery("#ratings-text").val('');
		jQuery("#ratings-rating").val('');
		return false; // do not let anchor click navigate
	}

	function getObjectId () {
		var objectIndex,
			objectId = jQuery("meta[name='alfrescoTraceID']").attr("content");
		//#US143698
        if(ratingsObject.configParam.objId !== undefined && ratingsObject.configParam.objId !== "")
        {
            objectId = ratingsObject.configParam.objId;
        }
		else if (objectId===undefined){
			objectId=window.location.pathname.replace("content","c");
			objectId=objectId.replace();
			objectId=objectId.split(".").join("_");
			objectId=objectId.split("/").join("_");
			objectId=encodeURIComponent(objectId);
			//replace / with _ replace . with _ then url encode
		}
		else {
			//objectId=objectId.replace("workspace://SpacesStore/","");
			if( objectId.lastIndexOf("/")  !== -1){
				objectIndex = objectId.lastIndexOf("/");
				if(objectIndex  > (objectId.indexOf("//"))){
					objectId = objectId.substring(objectIndex+1);
				}
			}
		}
		return objectId;
	}

	// story #US143698
	ratingsObject.getOverrideConfig=function(configData) {
                //var configObj = JSON.parse(configData);
                return configData;
        }

	//____________________________
	//||||||||| PUBLIC |||||||||||
	//____________________________

	/** Controls the stars form
	 *   @param {string} ids
	 *   @param {number} rating
	 */
	ratingsObject.ratingspage.setRatingOnForm=function(id, rating) {
		document.getElementById(id + "-rating").value = rating;
		var i = 1;
		if((jQuery("body").hasClass("cdc-eot-toc"))){
				while (i <= 5) {
					document.getElementById(id + "-star-" + i).className =
					"ratings-star " + (i <= rating ? "full selectedItem" : "empty");
					i++;
				}
			} else {
				while (i <= 5) {
					document.getElementById(id + "-star-" + i).className =
					"ratings-star " + (i <= rating ? "full" : "empty");
					i++;
				}
      }
	};

	/*
	 * ================  INIT  =========================
	 */

	// need to get the logged-in user's fullname via UID - do it first
	// so name will be there when we need it later
	function getUserNameUid() {
		debugLog("-- in getUserNameUid(), watch for UID callback...");
		cdc.userInfoDispatcher.getUserProfile({
			'listOfDataFields': ['phl'],
			'callback': function(uidData) {
				var profileInfo = uidData.phl,
					r = ratingsObject;
				debugLog("-- in UID callback...");
				if (typeof cec !== "undefined" && cec && cec.userInfo && cec.userInfo.info) {
					debugLog("  - cec.userInfo.info defined, using that instead of UID data");
					profileInfo = cec.userInfo.info;
				}

				r.fullName = profileInfo.givenName + ' ' + profileInfo.sn;
				r.userid   = profileInfo.uid;
				debugLog("  - user's fullname is '" + ratingsObject.fullName + "'");
				debugLog("  - userid is '" + ratingsObject.userid + "'");

				if (r.ratingsData[r.fullname]) {
					debugLog("  - prepopulating form to a rating of " + r.ratingsData[r.fullname]);
					cdc.rac.ratingspage.setRatingOnForm('ratings', r.ratingsData[r.fullname]);
				}

				debugLog("  - data: " + JSON.stringify(profileInfo));
				debugLog("-- end UID callback");
			}
		});
		debugLog("-- end getUserNameUid(), watch for UID callback...");
	}

	ratingsObject.init=function(){
		var r = ratingsObject,
			e = cdc.util.findEnvironment(),
			titleData, starInput, starSpan;

		parseParams(); // populates ratingsObject object with flags
		debugLog("in init()...");

		getUserNameUid();

		/*   the serviceUrl is the url to the MDS service
		 *   the appToken is used to handshake with the MDS service
		 */

		debugLog("-- initial env=["+e+"]");
		e = (e === "dev" || e === "stage") ? 'stage' : 'prod';
		debugLog("-- calculated env=["+e+"]");
		if (r.envOverride) {
			e = r.envOverride;
			debugLog("-- override env=["+e+"]");
		}

		r.envCurrent = e;
		r.serviceUrl = r.serviceUrls[e];
		r.appToken   = r.appTokens[appid][e];
		r.configParam = r.getOverrideConfig(configData);
		r.objectId   = getObjectId();
		r.cid = (r.envCurrent === "stage") ? 'MDX_Client_CDC_NPRD' : 'MDX_Client_CDC';
		r.redirectURL = "https://"+window.location.host+"/etc/designs/default/0.gif";
		debugLog("-- final env=["+e+"]");
		debugLog("-- app id=["+appid+"]");
		debugLog("-- serviceUrl=["+r.serviceUrl+"]");
		debugLog("-- appToken=["+r.appToken+"]");
		debugLog("-- objectId=["+r.objectId+"]");
		debugLog("-- cid=["+r.cid+"]");
		debugLog("-- redirectURL=["+r.redirectURL+"]");

		// look for no-title data attr
		titleData = jQuery("div#ratings + div.comments").attr('data-show-titles');
		if (titleData && titleData === "false") {
			r.showTitles = false;
			debugLog("-- data-show-title attribute is set, and is 'false' -- setting flag to false");
		}
		// NOTE: there is no way to set titles to true in the component, need to add to component dialog?
		else if (titleData && titleData === "true") {
			r.showTitles = true;
			debugLog("-- data-show-title attribute is set, and is 'true' -- setting flag to true");
		}

		if (r.titleOverride) {
			r.showTitles = (r.titleOverride === "no" || r.titleOverride === "hide") ? false : true;
			debugLog("-- titleOverride set to '" + r.titleOverride + "', setting flag to " + r.showTitles);
		}

		// if appid is 'cdc', move form pieces around (cec and cdc spec differ)
		if (appid === "cdc") {
			starInput = jQuery("div.ratings-stars-form");
			starSpan  = jQuery(starInput).find("span").detach();
			jQuery(starSpan).css({'padding-right':'10px', 'padding-left':'0px'});
			jQuery(starInput).css({'float':'none'});
			jQuery(starInput).prepend(starSpan);
			jQuery("label.rating-label").after(starInput);
			  if(!(jQuery("body").hasClass("cdc-eot-toc"))){
					jQuery(starInput).after('<label for="ratings-text" class="rnc-comment-label">' +r.strings[appid]["sr-only"] + '</div>');
					jQuery("div.comment-block").find("a").remove();
			}
			jQuery("#rac-form .form-group").css({'margin-left':'0px'});
			jQuery("div.comment-info").css({'float':'none'});
			jQuery("textarea#ratings-text").css({"height":"95px"});

		}

		// poke strings into jsp-generated content
		jQuery(r.strings.selector["rating-label"]).html(r.strings[appid]["rating-label"]);
		jQuery(r.strings.selector["sr-only"]).html(r.strings[appid]["sr-only"]);
		jQuery(r.strings.selector["ratings-text"]).html(r.strings[appid]["ratings-text"]);
		jQuery(r.strings.selector["form-spacer"]).html(r.strings[appid]["form-spacer"]);
		jQuery(r.strings.selector["username-label"]).html(r.strings[appid]["username-label"]);
		if((jQuery("body").hasClass("cdc-eot-toc"))){
			var spacerAttribute = r.strings[appid]["form-spacer"];
			var trimSpacerAttribute = spacerAttribute.replace(/[^a-zA-Z ]/g, "");
			jQuery(r.strings.selector["sub-label"]).html(trimSpacerAttribute);
		}
		// jQuery(r.strings.selector["sub-label"]).html(r.strings[appid]["form-spacer"]);
		jQuery(r.strings.selector["comment-block"]).html(r.strings[appid]["comment-block"]);
		jQuery(r.strings.selector["comments-count"]).html(r.strings[appid]["comments-count"]);

		jQuery(r.strings.selector["ratings-text"]).attr('data-placeholder',r.strings[appid]["ratings-text"]);
		jQuery(r.strings.selector["ratings-submit"]).attr('value',r.strings[appid]["ratings-submit"]);
        jQuery(r.strings.selector["ratings-post"]).attr('value',r.strings[appid]["ratings-post"]);


		// wire up form
		jQuery("#ratings-title").focus( function(){textareaFocusHandler(this);} );
		jQuery("#ratings-title").blur( function(){textareaBlurHandler(this);} );
		jQuery("#ratings-text").focus( function(){textareaFocusHandler(this);} );
		jQuery("#ratings-text").blur( function(){textareaBlurHandler(this);} );
		jQuery("#ratings-submit").click( function(){submitNewRating();} );
		jQuery("#ratings-post").click( function(){submitNewRating();} );
		jQuery(".comment-block a").click( function(){return clearInputs();} );

		if (ratingsObject.configParam.ratingsOnly==true){
            jQuery("label.rnc-comment-label").css({"display":"none"});
			jQuery("textarea#ratings-text").css({"display":"none"});
            jQuery(r.strings.selector["ratings-submit"]).attr('value',"Post Your Ratings");
        }

		// initialize submit notice flag, if not already in use
		//if (window.sessionStorage && !sessionStorage.getItem("racMessageState")) {
		//   sessionStorage.setItem("racMessageState","0");
		//}
        clientlibExternal().then(() => {
    		 cdc.sso.hasAuthHeader().then(function(token){
				if (token) {
					debugLog("-- Access token generated from all.js is:"+token);
					debugLog("-- calling getAllRatingsDetail("+r.objectId+")");
					r.getAllRatingsDetail(r.objectId,mainDisplayComments,token);
    			}
			 });
		});
	};

	return ratingsObject;

}());
//}('cec'));

jQuery(document).ready(function(){
	cdc.sso.addSSOListener(function () {
		cdc.rac.init();
		if((jQuery("body").hasClass("cdc-eot-toc"))){
			jQuery("div[id^='ratings-star-']").removeClass('full').addClass("empty");
			jQuery("div[id^='ratings-star-']").on("mouseover",function(){
				jQuery(this).prevAll().removeClass("empty").addClass("full");
				jQuery(this).removeClass("empty").addClass("full");
			});

			jQuery("div[id^='ratings-star-']").mouseleave(function(){
			    var selectedItem = jQuery("div[id^='ratings-star-']").parent().find('div.selectedItem').length;
			    if(selectedItem > 0) {
			      jQuery(this).prevAll().removeClass("full").addClass("empty");
			      jQuery(this).removeClass("full").addClass("empty");
			      cdc.rac.ratingspage.setRatingOnForm('ratings', selectedItem)
			    } else {
				  	jQuery(this).prevAll().removeClass("full").addClass("empty");
			      jQuery(this).removeClass("full").addClass("empty");
			    }
			});
		}
	});
});

/* ===> begin frag file: blacklist.js <=== */

(function(){
	"use strict";
	function initTextareaBlackList(selector,blacklist){
		var textarea=jQuery(selector),
			rot13 = function(word){
				return word.replace(/[a-zA-Z]/g, function(c){
					return String.fromCharCode((c <= "Z" ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);
				});
			},
			rot13Array = function(arry){
				jQuery.each(arry,function(i,v){
					arry[i]=rot13(v);
				});
			},
			multiWords=[],
			textObj;

		rot13Array(blacklist);
		//multi word setup
		jQuery.each(blacklist,function(i,v){
			var temp =v.split(" ");
			if (temp.length>1){
				multiWords.push(temp);
			}
		});

		textObj={
			checkForBlackWords:function(){
				var rewriteFlag=0,
					text=textarea.val(),
					letterCount,
					words;
				jQuery.each(multiWords,function(index,v){
					var tempLetterCount=v[0].length,
						tempLetterCount2=v[1].length,
						stars="",
						x, daWord, textTemp;
					for(x=0;x < tempLetterCount;x+=1){stars+="*";}
					stars+=" ";
					for(x=0;x < tempLetterCount2;x+=1){stars+="*";}
					daWord=v[0]+" "+v[1];
					textTemp=text.replace(daWord, stars);
					if (textTemp!==text){text=textTemp;rewriteFlag=1;}
				});
				words=text.split(" ");
				//Loop through the words check black list
				jQuery.each(words,function(i,word){
					var x,stars,splitOn=function(pat){
						var tempWords;
						if(word.indexOf(pat) > -1){
							//var tempindex=word.indexOf('\n');
							tempWords=word.split(pat);
							jQuery.each(tempWords,function(x,wordDos){
								var tempLetterCount, y;
								if (jQuery.inArray(wordDos.toLowerCase(),blacklist) > -1){
									tempLetterCount=tempWords[x].length;
									stars="";
									for(y=0;y < tempLetterCount;y+=1){stars+="*";}
									tempWords[x]=stars;
									rewriteFlag=1;
									words[i]=tempWords.join(pat);
								}
							});
						}
					};
					splitOn("\n");
					splitOn(".");
					splitOn(",");

					//Check multi word first
					jQuery.each(multiWords,function(index,v){
						var tempLetterCount,tempLetterCount2;
						if(words[i]!==undefined){
							if (words[i].toLowerCase() === v[0].toLowerCase() && words[i+1].toLowerCase() === v[1].toLowerCase() ){

								tempLetterCount=words[i].length;
								tempLetterCount2=words[i+1].length;
								stars="";
								for(x=0;x < tempLetterCount;x+=1){stars+="*";}
								words[i]=stars;
								stars="";
								for(x=0;x < tempLetterCount2;x+=1){stars+="*";}
								words[i+1]=stars;
								rewriteFlag=1;
							}}
					});
					if (jQuery.inArray(word.toLowerCase(),blacklist) > -1){
						letterCount=words[i].length;
						stars="";
						for(x=0;x < letterCount;x+=1){stars+="*";}
						words[i]=stars;
						rewriteFlag=1;
					}
				});

				//Rewrite the textarea
				if(rewriteFlag===1){
					this.setText(words.join(" "));
					this.selectRange(this.getCursorPosition(textarea), textarea);
				}
			},
			setText:function(text){
				textarea.val(text);
			},
			getCursorPosition : function(obj) {
				var el = obj.get(0),
					pos = 0,
					Sel, SelLength;
				if(el.hasOwnProperty("selectionStart")) {
					pos = el.selectionStart;
				}
				else if(document.hasOwnProperty("selection")) {
					el.focus();
					Sel = document.selection.createRange();
					SelLength = document.selection.createRange().text.length;
					Sel.moveStart("character", -el.value.length);
					pos = Sel.text.length - SelLength;
				}
				return pos;
			},
			selectRange : function(pos, elem) {
				elem=elem.get(0);
				if (elem.setSelectionRange) {
					elem.setSelectionRange(pos, pos);
				}
				else if (elem.createTextRange) {
					var range = elem.createTextRange();
					range.collapse(true);
					range.moveEnd("character", pos);
					range.moveStart("character", pos);
					range.select();
				}
			}
		};

		//EVENTS
		textarea.keyup(function(event) {
			// Check the keyCode and if the user pressed Enter
			//13= enter and mabey space in ie9
			//190 = period
			//188 = comma
			//32= space
			//8=backspace
			if (event.keyCode===190 || event.keyCode===188 || event.keyCode===32 || event.keyCode===13 || event.keyCode===8 ) {
				textObj.checkForBlackWords();
			}
		});
		textarea.focus(function(){textObj.checkForBlackWords();});
		textarea.blur(function(){textObj.checkForBlackWords();});
		return textObj;
	}

//Init the blacklist
	jQuery(function(){
		var url="//www.cisco.com/c/dam/assets/rac/bl.js";

		jQuery.ajax({
			url: url,
			dataType : "jsonp",
			jsonpCallback: "callback",
			success: function(data){
				initTextareaBlackList("#ratings-text",data);
			},
			fail: function(jqXHR, textStatus ){console.log("failed to load blacklist!");}
		});
	});
}());

if ( "undefined" == typeof clientlibExternal ) {
	var clientlibExternal = async () => {
		if (window.cdcext == null) {
			window.cdcext = {};
		}
	
		if (window.cdcext.host == null) {
			window.cdcext.host = 'WEM';
		}
	
		let cachebust = '';
	
		if (window.cdcext.customEnvironment != null && window.cdcext.customEnvironment !== 'prod') {
			var now = new Date();
	
			cachebust = '?t='+now.getUTCMonth()+now.getUTCDate()+now.getUTCHours();
		}
	
		// static import cannot be used outside of module script type
		await import('/etc.clientlibs/cisco-cdc/clientlibs/clientlib-external/resources/external/external.js'+cachebust);
	};
}
/**
* @fileOverview loaded on LLL page if there are correct permissions. Responsible for adding the link decorations to the LLL page for ratings.
* @author Derek Brenner <debrenne@cisco.com>
* @version 2.0
*/

/**
* File LLLratings.js Just a place holder for orginization, all code is exicuted on load singularly also reqires {@link cdc.rac}
* @namespace LLLratings
* @requires {@link cdc.rac}
*/

(function(){
    /**
    * @name links
    * @type object
    * @private
    * @example //jquery object json data
    *[{
    *    "id":"dba66db7fg",
    *    "modifyed":"/c/dnc/ratings/en/us/products/collateral/SE/LT_Test_05Dec/3l_pdf_06_12_2013_pdf_ratings.html"
    *    "original": "/c/dam/en/us/products/collateral/SE/LT_Test_05Dec/3l_pdf_06_12_2013.pdf",
    *    "type":"doc"
    *}]
    * @memberof LLLratings
    * @description  Save all link data for later use
    */
    var links=[];
    var ratingsNodes;
    var selector=".listing a.ratings";
    /**
    *@name getRatingsIds
    *@memberof LLLratings
    *@description returns the ids and also sets the private links array of urls that contains all data assotiated witht the objects
    *@returns {array} returns an array of IDs that match the selector
    *@function
    *@private
    */

	    /** ratingsObject.loadRatingChunks(chunks,result,callback){
    * force synchronous collection of data from ajax calls, then call callback with accumulated results
    */
    var loadRatingChunks=function(chunks,results,callback,token){
       if (!chunks.length) {
          return callback(results);
       }

       // get next chunk of ids, call service via ajax -- success handler adds svc data to 'results'
       var currentChunk = chunks.shift();
       //var serviceCall = cdc.rac.serviceUrl + cdc.rac.entitlement.cdc + "/" + appid + "/" + currentChunk + "listing.json";
        var serviceCall = cdc.rac.serviceUrls[cdc.util.findEnvironment()] + cdc.rac.entitlement.cdc + "/" + cdc.rac.appToken + "/" + currentChunk + "listing.json";
       //cdc.rac.debugLog("chunk array size: " + (chunks.length+1) + ": " + serviceCall);
       var headers = (token)?{"Authorization":token}:{};
       jQuery.ajax({
           url: serviceCall,
           dataType: "json",
           headers: headers,
           //contentType: "text/plain;charset=UTF-8", // as per Siva Kurapati (sivakura)
           cache: false,
           xhrFields: {
               withCredentials: true
           },
           crossDomain: true,
           success: function(data){
               if(data.status=="success"){
                   //cdc.rac.debugLog("chunk array size: " + (chunks.length+1) + " SUCCEEDED");
                   //cdc.rac.debugLog("incoming: " + JSON.stringify(data.ratings));
                   results.ratings = results.ratings.concat(data.ratings);
                   loadRatingChunks(chunks,results,callback,token);
               }
               else{
                   //cdc.rac.debugLog("chunk array size: " + (chunks.length+1) + ": somthing went wrong... failed ajax call in servicecall.getRating");
               }
           },
           error:function (xhr, ajaxOptions, thrownError,four){
               cdc.rac.debugLog("chunk array size: " + (chunks.length+1) + " -- getRatings error or no data");
               cdc.rac.debugLog(xhr.responseText);
               if(xhr.status==404) {
                    cdc.rac.debugLog(404);
               }
               if(xhr.status===0) {
                   cdc.rac.debugLog(0);
               }
               //var loginurl= domain + "/c/login/index.html?referer="+currentpath;
               //var loginurl="http://fdk-stage.cisco.com/c/login/index.html";
               //window.location.href =loginurl;
           },
           complete:function(data,ajaxOptions, thrownError,four){
              //cdc.rac.debugLog("loadRatingChunks AJAX call is complete");
           }
       });
    };

    /** getStars returns the raw string html of the renderd start
    *   @param {number} avg The average that you would like to render
    *   @return {string} The html that will be injected onto the page */
    var getStars=function(avg){
        var starWidth = 14;
        var spanWidth = Math.max(0, (Math.min(5, avg))) * starWidth;
        var returnString = "<span class='stars-small'><span style='width: " + (spanWidth) + "px' class='full-stars'></span></span>";
        //ratingsObject.debug && console.log("~~~ratingsObject.getStars~~~~ CALLED ~~~~");
        return returnString;
    };


    /** ratingsObject.getRating(ids,returnFunction)
    *   @param {array} ids An array of the object id's
    *   @param {function} returnFunction callback to be called
    *   @example
    * //Example call
    *ratingsObject.servicecall.getRating(ids,returnFunction);
    * //This is the data sent to the actual service, you dont need this to use the function
    *{
    *    "appid": "appid",
    *    "apptoken": "<apptoken>",
    *    "objectid": "objid,objid",
    *    "source"  : "<source identifier>"
    *}
    * // Full call getRating(["test","test00"], function(data){alert(JSON.stringify(data))});
    */
    var getRating=function(ids,returnFunction){
        var groups=[];
        var currentGroup="";
        var count=0;
        jQuery.each(ids,function(index,item){
            if (item.length + 1 + currentGroup.length >= 1800||count >= 49){
                groups.push(currentGroup);
                currentGroup="";
                count=0;
                currentGroup+= item + "/";
                count+=1;
            }
            else{
                currentGroup+= item + "/";
                count+=1;
                if(index+1 == ids.length){
                    groups.push(currentGroup);
                }
            }
        });
        //cdc.rac.debugLog("Number of groups: " + groups.length);
        //cdc.rac.debugLog("groups : "+JSON.stringify(groups));
        //if(typeof(returnFunction) != "function" && ratingsObject.debug){ cdc.rac.debugLog("return function not defined");}

        // These MDX clientIds have been created in PMT. Owners of the clientId can make changes to these configurations
        // There is no redirectUrl available in wwwin so passing www url to get the accesstoken on it.
        var foundEnv = cdc.util.findEnvironment();
        var cid = ( foundEnv =="dev" || foundEnv =="stage")? 'MDX_Client_CDC_NPRD' : 'MDX_Client_CDC';
        clientlibExternal().then(() => {
    		 cdc.sso.hasAuthHeader().then(function(token){
				if (token) {
                    cdc.rac.debugLog("-- Access token generated from lll is:"+token);
                    //Loop through all the calls that need to be made and run returnFunction on each result
                    // Originally this code was written assuming synchronous calls, which lead to DE2005 and DE2008
                    // Now written to force asynch, similar to CDC-ID includer.js's loadJS()
                    loadRatingChunks(groups,{"ratings":[]},returnFunction,token);
                }
             });
        });
    };



        /**
    * returns the file suffix given a url
    * @param url the url in question
    */
    var getUrlFileSuffix=function(url){
        var re = /(?:\.([^.]+))?$/;
        url=url.split("?")[0];
        url=re.exec(url)[1];
        return url;
    };

    var formatId=function(id){
        id=id.split(".").join("_");
        id=id.split("/").join("_");
        id=encodeURIComponent(id);
        cdc.rac.debug && console.log(id);
        return id;
    };

    var getRatingsIds =function() {
        ratingsNodes=jQuery(selector);
        var ids = [];

        ratingsNodes.each(function() {
            //used to save in the links array to keep track of original url
            var targetUrl = jQuery(this).attr("href");

            var targetSuffix= getUrlFileSuffix(targetUrl);
            var linksElement={"original":targetUrl};
	    var refresh = 1; // turn of cachemode=refresh if a ratings page

            //convert it

            linksElement.type="eot";
            targetUrl=targetUrl.replace("/content/", "/c/");
            if(jQuery.inArray(targetSuffix.toLowerCase(),["html","htm"])===-1){
                var suff= "." + targetSuffix;
                cdc.rac.debug && console.log("in if loop" + suff );
                targetUrl=targetUrl.replace(suff,"_" + targetSuffix + "_ratings.html");
                targetUrl=targetUrl.replace("/dam", "/dnc/ratings");
                linksElement.type="doc";
		refresh = 0; // DE1952
            }
            if(jQuery(this).hasClass("external")){
                linksElement.type="external";
                targetUrl=targetUrl.replace("/c/", "/c/dnc/ratings/");
                targetUrl=targetUrl.replace(".html","_ext_ratings.html");
		refresh = 0; // DE1952
            }
            if (linksElement.type=="eot"){
               jQuery(this).attr("href",linksElement.original.replace(".html", ".html?cachemode=refresh"));
            }

            //Set up the ratings id
            linksElement.id=jQuery(this).attr("data-alfrescoid"); // DE1965, was data-alfrescotraceid
            if(typeof linksElement.id=="undefined"){
                linksElement.id=targetUrl;
            }
            linksElement.id=formatId(linksElement.id);
            jQuery(this).attr("data-ratingsid",linksElement.id);

	    if (refresh) { // DE1952
               targetUrl=targetUrl.replace(".html",".html?cachemode=refresh");
	    }

            if (targetUrl) {
                cdc.rac.debug && console.log(targetUrl);
                ids.push(linksElement.id);
                linksElement.modifyed=targetUrl;
                links.push(linksElement);
                cdc.rac.debug && console.log(linksElement);
            }
        });
        return ids;
    };
    /**
    *@name display
    *@memberof LLLratings
    *@description This is the callback function that is passed to the getrating call.  It handels all the display logic
    *@returns {array} returns an array of IDs that match the selector
    *@function
    *@private
    *@requires {@link cdc.rac.getStars}
    */
    var display=function(json){
        cdc.rac.debug && console.log("in cdc.rac.listing.display(), json input is: " + JSON.stringify(json));
        jQuery(".loading").remove();
        //loop through all the links
        jQuery.each(links,function(index,linksObj){
            var currentNode= jQuery(ratingsNodes).filter("[data-ratingsid='" + linksObj.id + "']");
            if(currentNode.length>=1){
                var linktext =currentNode.text();
                var linkId=linksObj.id;
                var originalUrl=linksObj.original;
                var url=linksObj.modifyed;
                var decorationFlag=0;
                cdc.rac.debug && console.log(originalUrl);

                //set up external url
                if (currentNode.hasClass("external_ratings")){
                    url+="?title="+encodeURIComponent(linktext)+"&url="+encodeURIComponent(originalUrl);
                }
                //was there a responce

                if (!jQuery.isEmptyObject(json.ratings)){

                    //check responce for url
                    jQuery.each(json.ratings, function(index, rating){
                        var avg = rating.average_rating || 0;
                        var tot = rating.count || 0;
                        var responceId= rating.objectid;
                        //Found the correct responce
                        //cdc.rac.debug && console.log("modifyed  = "+url+" responceUrl = "+responceUrl);
                        if (linkId==responceId){
                            cdc.rac.debug && console.log(originalUrl + ": avg=[" + avg +"]; tot=[" + tot + "]");
                            decorationFlag=1;
                            if (avg === 0){
                                currentNode.after("<span class='firstToRate'> <a href='"+url+"'>Be the first to rate!</a></span>");
                            }
                            else {
                                //TODO: pull this out and make a template string var up above; then expand template here with local variables
                                var ratingSummary ="<span class='lll_rac_decoration'><a href='"+url+"'>"+ getStars(avg)+"</a>"+"<span class='rac-view-link'> | <a href='"+url+"'>Comments</a></span></span>";
                                currentNode.after(ratingSummary);
                            }
                        }
                    });
                }
                else{console.log("no responce");}
                //no ratings
                if(decorationFlag === 0 && jQuery.isEmptyObject(linksObj) === false){
                    currentNode.after("<span class='firstToRate'> <a href='"+url+"'>Be the first to rate!</a></span>");
                }
            }
            else{
                console.log(linksObj.original+ " link does not seem to exist on this page!!");
            }

        });
    };

    jQuery(selector).after("<span class='loading'>  loading...</span>");
    jQuery(function(){
        //cdc.rac("cdc");
        var ids = getRatingsIds();
        if(ids.length >= 1){
            getRating(ids,display);
        }
    });

})();

if (jQuery('body').hasClass('cdc-eot-toc')){
jQuery(document).ready(function() {
  var eotTocContainer = jQuery('.doctool');
  var eotTocRnc = eotTocContainer.find('.eot-feedback-container');
  var clonedRatingsItem = eotTocRnc.clone();
  eotTocContainer.find('.eot-feedback-container').remove();
  var docHeaderContent = eotTocContainer.find('.docHeaderComponent .linksRow');
  docHeaderContent.prepend(clonedRatingsItem);
});
}

